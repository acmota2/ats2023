/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 16:03:39 GMT 2023
 */

package org.example.SmartDevice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.SmartDevice.SmartBulb;
import org.example.SmartDevice.SmartCamera;
import org.example.SmartDevice.SmartDevice;
import org.example.SmartDevice.SmartSpeaker;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartDevice_ESTest extends SmartDevice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("~km}j");
      String string0 = smartBulb0.toString();
      assertEquals("SmartBulb{id='~km}j', on='false', tone='1', height='0.0'}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("~km}j");
      smartBulb0.turnOn();
      boolean boolean0 = smartBulb0.getOn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("org.example.SmartDevice.SmartDevice", (-690), "%'z", "org.example.SmartDevice.SmartDevice");
      String string0 = smartSpeaker0.getID();
      assertEquals("org.example.SmartDevice.SmartDevice", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      String string0 = smartCamera0.getID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("SmartBulb{id='~km}j', on='true', tone='1', height='-1049.1487080618938'}");
      double double0 = smartSpeaker0.getConsume();
      assertEquals(0.0072, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb((String) null, (-1410), (-2426.0));
      double double0 = smartBulb0.getConsume();
      assertEquals((-40.01), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("(f~$BMj]TJKYj]1");
      Object object0 = new Object();
      boolean boolean0 = smartBulb0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("Qpn@W8[nmq3");
      smartBulb0.turnOn();
      smartBulb0.clone();
      assertTrue(smartBulb0.getOn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb();
      SmartDevice smartDevice0 = smartBulb0.clone();
      assertFalse(smartDevice0.getOn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("{,fKtHMzZ;TF>jU5b", "{,fKtHMzZ;TF>jU5b", 0);
      // Undeclared exception!
      try { 
        smartCamera0.getConsume();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setResolution((String) null);
      // Undeclared exception!
      try { 
        smartCamera0.getConsume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.SmartDevice.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, (-2111), (String) null, "()x");
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("()x", (-2111), "()x", ", brand'");
      // Undeclared exception!
      try { 
        smartSpeaker0.equals(smartSpeaker1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, 39, ", brand='", (String) null);
      String string0 = smartSpeaker0.getID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb((String) null, (-1410), (-2426.0));
      boolean boolean0 = smartBulb0.getOn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("q`hk:-AB&");
      SmartBulb smartBulb1 = new SmartBulb("q`hk5-AZ&");
      boolean boolean0 = smartBulb0.equals(smartBulb1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera0.turnOn();
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertTrue(smartCamera0.getOn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("iS>X7Si");
      smartSpeaker0.setOn(true);
      assertTrue(smartSpeaker0.getOn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("{,fKtHMzZ;TF>jU5b", "{,fKtHMzZ;TF>jU5b", 0);
      smartCamera0.turnOff();
      assertFalse(smartCamera0.getOn());
  }
}
