/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue May 16 17:45:20 GMT 2023
 */

package org.example.CasaInteligente;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class CasaInteligente_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.example.CasaInteligente.CasaInteligente"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "GB"); 
    java.lang.System.setProperty("user.dir", "/home/anightatheopera/Documents/ats2023/ats"); 
    java.lang.System.setProperty("user.home", "/home/anightatheopera"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "anightatheopera"); 
    java.lang.System.setProperty("user.timezone", "Europe/Lisbon"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CasaInteligente_ESTest_scaffolding.class.getClassLoader() ,
      "org.eclipse.aether.spi.locator.ServiceLocator",
      "org.eclipse.aether.version.VersionRange$Bound",
      "org.eclipse.aether.RepositoryEvent",
      "org.eclipse.aether.util.repository.ChainedWorkspaceReader",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ConflictContext",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeDeriver",
      "org.example.SmartDevice.SmartCamera",
      "org.eclipse.aether.artifact.ArtifactTypeRegistry",
      "org.eclipse.aether.version.Version",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeSelector",
      "org.eclipse.aether.repository.Proxy",
      "org.eclipse.aether.repository.AuthenticationSelector",
      "org.eclipse.aether.resolution.ArtifactDescriptorPolicyRequest",
      "org.example.CasaInteligente.DivisaoJaExisteException",
      "org.eclipse.aether.version.VersionRange",
      "org.eclipse.aether.resolution.ArtifactDescriptorPolicy",
      "org.eclipse.aether.collection.DependencyCollectionContext",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeContext",
      "org.eclipse.aether.repository.LocalArtifactRegistration",
      "org.eclipse.aether.transfer.TransferCancelledException",
      "org.eclipse.aether.resolution.ResolutionErrorPolicyRequest",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$OptionalitySelector",
      "org.eclipse.aether.repository.MirrorSelector",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver",
      "org.eclipse.aether.repository.ArtifactRepository",
      "org.eclipse.aether.graph.DependencyVisitor",
      "org.eclipse.aether.util.repository.DefaultMirrorSelector$MirrorDef",
      "org.example.SmartDevice.SmartSpeaker",
      "org.eclipse.aether.impl.DefaultServiceLocator$Entry",
      "org.eclipse.aether.impl.DefaultServiceLocator",
      "org.eclipse.aether.transfer.TransferEvent$RequestType",
      "org.eclipse.aether.repository.WorkspaceRepository",
      "org.eclipse.aether.impl.UpdateCheck",
      "org.eclipse.aether.repository.LocalRepository",
      "org.eclipse.aether.collection.DependencyTraverser",
      "org.eclipse.aether.repository.RepositoryPolicy",
      "org.eclipse.aether.artifact.Artifact",
      "org.eclipse.aether.repository.WorkspaceReader",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$NodeInfo",
      "org.eclipse.aether.RepositoryListener",
      "org.eclipse.aether.RepositoryCache",
      "org.eclipse.aether.RequestTrace",
      "org.eclipse.aether.repository.LocalRepositoryManager",
      "org.eclipse.aether.metadata.Metadata",
      "org.example.CasaInteligente.CasaInteligente",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ConflictItem",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$State",
      "org.eclipse.aether.repository.LocalMetadataRequest",
      "org.eclipse.aether.repository.LocalArtifactRequest",
      "org.eclipse.aether.collection.DependencyManagement",
      "org.eclipse.aether.util.repository.ChainedWorkspaceReader$Key",
      "org.example.SmartDevice.SmartDevice",
      "org.eclipse.aether.graph.Dependency",
      "org.eclipse.aether.collection.DependencyGraphTransformer",
      "org.eclipse.aether.collection.DependencyGraphTransformationContext",
      "org.eclipse.aether.transfer.TransferListener",
      "org.eclipse.aether.artifact.AbstractArtifact",
      "org.eclipse.aether.RepositorySystemSession",
      "org.eclipse.aether.transfer.TransferEvent$EventType",
      "org.codehaus.classworlds.BytesURLConnection",
      "org.eclipse.aether.repository.AuthenticationDigest",
      "org.eclipse.aether.transfer.TransferEvent",
      "org.eclipse.aether.metadata.Metadata$Nature",
      "org.eclipse.aether.artifact.ArtifactType",
      "org.eclipse.aether.internal.impl.Slf4jLoggerFactory",
      "org.eclipse.aether.collection.DependencySelector",
      "org.eclipse.aether.transfer.TransferResource",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$VersionSelector",
      "org.eclipse.aether.spi.log.LoggerFactory",
      "org.eclipse.aether.util.repository.DefaultMirrorSelector",
      "org.eclipse.aether.version.VersionConstraint",
      "org.eclipse.aether.spi.locator.Service",
      "org.example.SmartDevice.SmartBulb",
      "org.eclipse.aether.repository.LocalMetadataResult",
      "org.eclipse.aether.graph.DependencyNode",
      "org.codehaus.classworlds.BytesURLStreamHandler",
      "org.eclipse.aether.artifact.DefaultArtifact",
      "org.eclipse.aether.repository.LocalMetadataRegistration",
      "org.eclipse.aether.SessionData",
      "org.eclipse.aether.repository.ProxySelector",
      "org.eclipse.aether.repository.LocalArtifactResult",
      "org.eclipse.aether.graph.DefaultDependencyNode",
      "org.eclipse.aether.repository.RemoteRepository",
      "org.eclipse.aether.repository.Authentication",
      "org.eclipse.aether.RepositoryEvent$EventType",
      "org.eclipse.aether.RepositoryException",
      "org.eclipse.aether.impl.DefaultServiceLocator$ErrorHandler",
      "org.eclipse.aether.repository.AuthenticationContext",
      "org.eclipse.aether.collection.DependencyManager",
      "org.eclipse.aether.resolution.ResolutionErrorPolicy",
      "org.eclipse.aether.spi.log.Logger"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CasaInteligente_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.example.CasaInteligente.CasaInteligente",
      "org.example.SmartDevice.SmartDevice",
      "org.example.SmartDevice.SmartCamera",
      "org.example.SmartDevice.SmartBulb",
      "org.example.CasaInteligente.DivisaoJaExisteException",
      "org.example.SmartDevice.SmartSpeaker",
      "org.eclipse.aether.impl.UpdateCheck",
      "org.eclipse.aether.util.repository.ChainedWorkspaceReader",
      "org.eclipse.aether.impl.DefaultServiceLocator",
      "org.eclipse.aether.impl.DefaultServiceLocator$Entry",
      "org.eclipse.aether.internal.impl.Slf4jLoggerFactory",
      "org.eclipse.aether.repository.WorkspaceRepository",
      "org.eclipse.aether.util.repository.ChainedWorkspaceReader$Key",
      "org.eclipse.aether.artifact.AbstractArtifact",
      "org.eclipse.aether.artifact.DefaultArtifact",
      "org.eclipse.aether.resolution.ResolutionErrorPolicyRequest",
      "org.eclipse.aether.graph.DefaultDependencyNode",
      "org.eclipse.aether.util.graph.transformer.ConflictResolver$ConflictItem",
      "org.codehaus.classworlds.BytesURLStreamHandler",
      "org.eclipse.aether.util.repository.DefaultMirrorSelector",
      "org.eclipse.aether.util.repository.DefaultMirrorSelector$MirrorDef"
    );
  }
}
