/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 15:59:38 GMT 2023
 */

package org.example.Fornecedor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Fatura.Fatura;
import org.example.Fornecedor.Fornecedor;
import org.example.Fornecedor.FornecedorTipo1;
import org.example.Fornecedor.FornecedorTipo2;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fornecedor_ESTest extends Fornecedor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("ConflictIdSorter.topsortTime", (-451.937342), (-451.937342), (-451.937342));
      fornecedorTipo2_0.setMultiplicador(2194.399F);
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      fornecedorTipo2_0.setMultiplicador(1068.0F);
      boolean boolean0 = fornecedor0.equals(fornecedorTipo2_0);
      assertEquals(1068.0, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("ConflictIdSorter.topsortTime", (-451.937342), (-451.937342), (-451.937342));
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      fornecedor0.setImposto(2194.399F);
      boolean boolean0 = fornecedor0.equals(fornecedorTipo2_0);
      assertEquals(2194.39892578125, fornecedor0.getImposto(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1((String) null, (-1.0), (-1.0), 405.84241869);
      boolean boolean0 = fornecedorTipo1_0.equals(fornecedorTipo1_1);
      assertEquals((-1.0), fornecedorTipo1_1.getPrecoBase(), 0.01);
      assertEquals(405.84241869, fornecedorTipo1_1.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals((-1.0), fornecedorTipo1_1.getImposto(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("2", 0.0, (-1.0), (-4051.157162882961));
      double double0 = fornecedorTipo1_0.precoDiaPorDispositivo(0, (-2281.6609));
      assertEquals((-4051.157162882961), fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(-0.0, double0, 0.01);
      assertEquals((-1.0), fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      
      fornecedorTipo1_0.setPrecoBase((-1));
      double double0 = fornecedorTipo1_0.precoDiaPorDispositivo((-1), 1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("", (-878.612063), (-878.612063), (-878.612063));
      double double0 = fornecedorTipo2_0.precoDiaPorDispositivo((-428), 643.4971985862669);
      assertEquals((-565384.4011846007), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, 1110.2335770586114, 1110.2335770586114, 1110.2335770586114);
      double double0 = fornecedorTipo2_0.getPrecoBase();
      assertEquals(1110.2335770586114, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(1110.2335770586114, double0, 0.01);
      assertEquals(1110.2335770586114, fornecedorTipo2_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.setPrecoBase((-1846.194F));
      double double0 = fornecedorTipo1_0.getPrecoBase();
      assertEquals((-1846.1939697265625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, 414.944944, 414.944944, 414.944944);
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1(fornecedorTipo2_0);
      fornecedorTipo1_0.getNome();
      assertEquals(414.944944, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(414.944944, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(414.944944, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(414.944944, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(414.944944, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(414.944944, fornecedorTipo2_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.getNome();
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, 414.944944, 414.944944, 414.944944);
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1(fornecedorTipo2_0);
      double double0 = fornecedorTipo1_0.getMultiplicador();
      assertEquals(414.944944, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(414.944944, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(414.944944, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(414.944944, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(414.944944, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(414.944944, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("_).l", (-321.1792805969), 0.0, (-321.1792805969));
      double double0 = fornecedorTipo2_0.getMultiplicador();
      assertEquals((-321.1792805969), fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals((-321.1792805969), double0, 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("4GrG]", (-322.946005), (-322.946005), (-322.946005));
      fornecedorTipo1_0.setImposto(0.0F);
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.setImposto(2.0F);
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, 1110.2335770586114, 1110.2335770586114, 1110.2335770586114);
      Fatura fatura0 = new Fatura();
      fornecedorTipo2_0.addFatura(0, fatura0);
      fornecedorTipo2_0.getFaturasDoNIF(0);
      assertEquals(1110.2335770586114, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(1110.2335770586114, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(1110.2335770586114, fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("org.eclipse.aether.util.repository.ChainedWorkspaceReader", 1.0, 476.8566741959, 476.8566741959);
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      assertEquals(476.8566741959, fornecedor0.getMultiplicador(), 0.01);
      assertEquals(476.8566741959, fornecedor0.getImposto(), 0.01);
      assertEquals(1.0, fornecedor0.getPrecoBase(), 0.01);
      assertTrue(fornecedor0.equals((Object)fornecedorTipo2_0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("nk(ut^V!!w", (-3023.931155), (-3023.931155), (-3023.931155));
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      assertEquals((-3023.931155), fornecedor0.getImposto(), 0.01);
      assertTrue(fornecedor0.equals((Object)fornecedorTipo2_0));
      assertEquals((-3023.931155), fornecedor0.getPrecoBase(), 0.01);
      assertEquals((-3023.931155), fornecedor0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1((String) null, 0.0, 2247.879745, 2247.879745);
      // Undeclared exception!
      try { 
        fornecedorTipo1_0.addFatura(4409, (Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("", 0.0, 0.1, 0.1);
      Fatura fatura0 = new Fatura();
      fornecedorTipo2_0.addFatura((-2056), fatura0);
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1(fornecedorTipo2_0);
      fornecedorTipo1_0.getFaturas();
      assertEquals(0.1, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(0.1, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.eclipse.aether.repository.RemoteRepository$Builder", 392.5741132633, 0.0, 0.0);
      fornecedorTipo1_0.getFaturas();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(392.5741132633, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("interval", 0.0, 0.0, 0.0);
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2(fornecedorTipo1_0);
      double double0 = fornecedorTipo2_0.getPrecoBase();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("METADATA_DEPLOYING", 0.0, 0.0, 0.0);
      double double0 = fornecedorTipo1_0.getMultiplicador();
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("METADATA_DEPLOYING", 0.0, 0.0, 0.0);
      fornecedorTipo1_0.getNome();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("4GrG]", (-322.946005), (-322.946005), (-322.946005));
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals((-322.946005), fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals((-322.946005), double0, 0.01);
      assertEquals((-322.946005), fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2();
      FornecedorTipo2 fornecedorTipo2_1 = new FornecedorTipo2("artifact to register not specified", 0.0, 0.0, 0.0);
      boolean boolean0 = fornecedorTipo2_0.equals(fornecedorTipo2_1);
      assertEquals(0.0, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, fornecedorTipo2_1.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo2_1.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo2_1.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2();
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      fornecedor0.setMultiplicador((-2224.612F));
      boolean boolean0 = fornecedor0.equals(fornecedorTipo2_0);
      assertEquals((-2224.612060546875), fornecedor0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1((String) null, 957.406770542828, 957.406770542828, 957.406770542828);
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1(fornecedorTipo1_0);
      fornecedorTipo1_1.setImposto((-339.707F));
      boolean boolean0 = fornecedorTipo1_1.equals(fornecedorTipo1_0);
      assertEquals((-339.7070007324219), fornecedorTipo1_1.getImposto(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.eclipse.aether.repository.RemoteRepository$Builder", 407.4713206080964, 407.4713206080964, 407.4713206080964);
      Fornecedor fornecedor0 = fornecedorTipo1_0.clone();
      assertEquals(407.4713206080964, fornecedor0.getPrecoBase(), 0.01);
      
      fornecedor0.setPrecoBase(0);
      boolean boolean0 = fornecedor0.equals(fornecedorTipo1_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.eclipse.aether.repository.RemoteRepository$Builder", 407.4713206080964, 407.4713206080964, 407.4713206080964);
      boolean boolean0 = fornecedorTipo1_0.equals("org.eclipse.aether.repository.RemoteRepository$Builder");
      assertFalse(boolean0);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2();
      boolean boolean0 = fornecedorTipo2_0.equals(fornecedorTipo2_0);
      assertEquals(0.0, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getImposto(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      boolean boolean0 = fornecedorTipo1_0.equals((Object) null);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      Fatura fatura0 = new Fatura();
      fornecedorTipo1_0.addFatura(0, fatura0);
      boolean boolean0 = fornecedorTipo1_0.TemFaturas();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.eclipse.aether.repository.RemoteRepository$Builder", 407.4713206080964, 407.4713206080964, 407.4713206080964);
      boolean boolean0 = fornecedorTipo1_0.TemFaturas();
      assertEquals(407.4713206080964, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      Fatura fatura0 = new Fatura();
      fornecedorTipo1_0.addFatura(0, fatura0);
      HashMap<Integer, List<Fatura>> hashMap0 = new HashMap<Integer, List<Fatura>>();
      fornecedorTipo1_0.setFaturas(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.hashCode();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      // Undeclared exception!
      try { 
        fornecedorTipo1_0.getFaturasDoNIF((-953));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = null;
      try {
        fornecedorTipo1_0 = new FornecedorTipo1("", 0.0, 0.0, 0.0, (Map<Integer, List<Fatura>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.eclipse.aether.repository.RemoteRepository$Builder", 407.4713206080964, 407.4713206080964, 407.4713206080964);
      Fornecedor fornecedor0 = fornecedorTipo1_0.clone();
      boolean boolean0 = fornecedor0.equals(fornecedorTipo1_0);
      assertTrue(boolean0);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(407.4713206080964, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(407.4713206080964, fornecedor0.getPrecoBase(), 0.01);
  }
}
