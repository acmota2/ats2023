/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 16:00:01 GMT 2023
 */

package org.example.Fatura;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.example.Fatura.Fatura;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Fatura fatura0 = new Fatura(0, 0, localDate0, localDate0);
      Fatura fatura1 = new Fatura(0, 1100.2, localDate0, localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(boolean0);
      assertFalse(fatura1.equals((Object)fatura0));
      assertEquals(0, fatura1.getNIF());
      assertEquals(1100.2, fatura1.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setNIF(14);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(14, fatura1.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura0);
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1061), (-1061), localDate0, localDate0);
      int int0 = fatura0.compareTo(fatura0);
      assertEquals(0, int0);
      assertEquals((-1061.0), fatura0.getValorFaturacao(), 0.01);
      assertEquals((-1061), fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getValorFaturacao();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setValorFaturacao(2272.137177006);
      double double0 = fatura0.getValorFaturacao();
      assertEquals(2272.137177006, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      int int0 = fatura0.getNIF();
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Fatura fatura0 = new Fatura(1, 681.080320626106, localDate0, localDate0);
      int int0 = fatura0.getNIF();
      assertEquals(681.080320626106, fatura0.getValorFaturacao(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Fatura fatura0 = new Fatura(1, 681.080320626106, localDate0, localDate0);
      Fatura fatura1 = fatura0.clone();
      assertEquals(1, fatura1.getNIF());
      assertEquals(681.080320626106, fatura1.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1061), (-1061), localDate0, localDate0);
      Fatura fatura1 = fatura0.clone();
      assertEquals((-1061), fatura1.getNIF());
      assertEquals((-1061.0), fatura1.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setData_inicio((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setData_fim((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(14);
      Fatura fatura0 = new Fatura(14, 0.0, localDate0, localDate0);
      // Undeclared exception!
      try { 
        fatura0.compareTo((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fatura.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fatura.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((-1182), (-1182), (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1061), (-1061), localDate0, localDate0);
      fatura0.getData_fim();
      assertEquals((-1061), fatura0.getNIF());
      assertEquals((-1061.0), fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1061), (-1061), localDate0, localDate0);
      int int0 = fatura0.getNIF();
      assertEquals((-1061), int0);
      assertEquals((-1061.0), fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1061), (-1061), localDate0, localDate0);
      double double0 = fatura0.getValorFaturacao();
      assertEquals((-1061), fatura0.getNIF());
      assertEquals((-1061.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1208), (-1208), localDate0, localDate0);
      fatura0.setData_inicio(localDate0);
      assertEquals((-1208), fatura0.getNIF());
      assertEquals((-1208.0), fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Fatura fatura0 = new Fatura(1, 1, localDate0, localDate0);
      LocalDate localDate1 = MockLocalDate.now();
      Fatura fatura1 = new Fatura(1, 1, localDate1, localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1, fatura1.getNIF());
      assertEquals(1.0, fatura1.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura();
      fatura0.setNIF((-746));
      Fatura fatura1 = new Fatura(0, (-746), localDate0, localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-746), fatura0.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals("tp,");
      assertFalse(boolean0);
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals((Object) null);
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(0, (-746), localDate0, localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals((-746.0), fatura1.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
      assertFalse(fatura1.equals((Object)fatura0));
      assertEquals(0, fatura1.getNIF());
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setValorFaturacao(276.64088151566904);
      int int0 = fatura0.compareTo(fatura1);
      assertEquals(276.64088151566904, fatura0.getValorFaturacao(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(0, (-746), localDate0, localDate0);
      int int0 = fatura1.compareTo(fatura0);
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals((-1), int0);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      boolean boolean0 = fatura1.equals(fatura0);
      assertTrue(boolean0);
      assertEquals(0.0, fatura1.getValorFaturacao(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      String string0 = fatura0.toString();
      assertEquals("Fatura{NIF=0, valorFatura\u00E7\u00E3o=0.0, data_inicio=2014-02-14, data_fim=2014-02-14}\n", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF(24);
      LocalDate localDate0 = MockLocalDate.ofYearDay(24, 24);
      fatura0.setData_fim(localDate0);
      LocalDate localDate1 = fatura0.getData_inicio();
      Fatura fatura1 = new Fatura(24, 0.0, localDate1, localDate1);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(24, fatura0.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = fatura0.clone();
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura1.getValorFaturacao(), 0.01);
  }
}
