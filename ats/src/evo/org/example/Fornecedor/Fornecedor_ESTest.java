/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 15:56:29 GMT 2023
 */

package org.example.Fornecedor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.example.Fatura.Fatura;
import org.example.Fornecedor.Fornecedor;
import org.example.Fornecedor.FornecedorTipo1;
import org.example.Fornecedor.FornecedorTipo2;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fornecedor_ESTest extends Fornecedor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("", 0.0, 1313.87915634, (-1.0));
      Fornecedor fornecedor0 = fornecedorTipo2_0.clone();
      fornecedorTipo2_0.setMultiplicador(2459.9202F);
      boolean boolean0 = fornecedor0.equals(fornecedorTipo2_0);
      assertEquals(2459.920166015625, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.example.Fatura.Fatura", 0.1, 0.1, 0.1);
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2(fornecedorTipo1_0);
      FornecedorTipo2 fornecedorTipo2_1 = new FornecedorTipo2("", 0.1, 1962.5061104266076, 1962.5061104266076);
      boolean boolean0 = fornecedorTipo2_0.equals(fornecedorTipo2_1);
      assertEquals(0.1, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(1962.5061104266076, fornecedorTipo2_1.getImposto(), 0.01);
      assertEquals(1962.5061104266076, fornecedorTipo2_1.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_0.getImposto(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.1, fornecedorTipo2_1.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", 5571.60877214, 2880.398796134742, 2880.398796134742);
      fornecedorTipo1_0.setPrecoBase(316.769F);
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1("", 2880.398796134742, 5571.60877214, 316.769F);
      boolean boolean0 = fornecedorTipo1_1.equals(fornecedorTipo1_0);
      assertEquals(316.7690124511719, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, 1.0, 1.0, 1.0);
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1(fornecedorTipo2_0);
      double double0 = fornecedorTipo1_0.precoDiaPorDispositivo(92, 0.0);
      assertEquals(1.0, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(1.0, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(1.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(1.0, fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, (-577.508), 0.0, 0.0);
      fornecedorTipo2_0.setMultiplicador(2033.4978F);
      double double0 = fornecedorTipo2_0.precoDiaPorDispositivo((-2550), (-1029.857));
      assertEquals(2033.497802734375, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("2e1Q4(", (-4065.352354), (-4065.352354), (-4065.352354));
      fornecedorTipo2_0.setImposto(944.5824F);
      double double0 = fornecedorTipo2_0.precoDiaPorDispositivo((-3244), (-637.32836962));
      assertEquals(944.5823974609375, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals((-1.1151153357296098E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      double double0 = fornecedorTipo1_0.getPrecoBase();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", 5571.60877214, 2880.398796134742, 2880.398796134742);
      double double0 = fornecedorTipo1_0.getPrecoBase();
      assertEquals(5571.60877214, double0, 0.01);
      assertEquals(2880.398796134742, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(2880.398796134742, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2((String) null, (-577.508), 0.0, 0.0);
      fornecedorTipo2_0.getNome();
      assertEquals(0.0, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals((-577.508), fornecedorTipo2_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("2e1Q4(", (-4065.352354), (-4065.352354), (-4065.352354));
      fornecedorTipo2_0.getNome();
      assertEquals((-4065.352354), fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals((-4065.352354), fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals((-4065.352354), fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("k]jne({z+^", (-444.0500526447), (-444.0500526447), 245.4008931403133);
      double double0 = fornecedorTipo2_0.getMultiplicador();
      assertEquals(245.4008931403133, double0, 0.01);
      assertEquals((-444.0500526447), fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals((-444.0500526447), fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("", 766.88, 766.88, (-1.0));
      double double0 = fornecedorTipo2_0.getMultiplicador();
      assertEquals(766.88, fornecedorTipo2_0.getPrecoBase(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(766.88, fornecedorTipo2_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", 5571.60877214, 2880.398796134742, 2880.398796134742);
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals(2880.398796134742, double0, 0.01);
      assertEquals(5571.60877214, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(2880.398796134742, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Fatura fatura0 = new Fatura(1, 1, localDate0, localDate0);
      fornecedorTipo1_0.addFatura(1, fatura0);
      fornecedorTipo1_0.getFaturasDoNIF(1);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.example.Fatura.Fatura", 0.1, 0.1, 0.1);
      Fornecedor fornecedor0 = fornecedorTipo1_0.clone();
      assertEquals(0.1, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.1, fornecedor0.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo1_0.getImposto(), 0.01);
      assertTrue(fornecedor0.equals((Object)fornecedorTipo1_0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1(", data_inicio=", (-531.3), (-531.3), (-531.3));
      Fornecedor fornecedor0 = fornecedorTipo1_0.clone();
      assertTrue(fornecedor0.equals((Object)fornecedorTipo1_0));
      assertEquals((-531.3), fornecedor0.getPrecoBase(), 0.01);
      assertEquals((-531.3), fornecedor0.getImposto(), 0.01);
      assertEquals((-531.3), fornecedor0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      // Undeclared exception!
      try { 
        fornecedorTipo1_0.addFatura((-1864), (Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", 5571.60877214, 2880.398796134742, 2880.398796134742);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura(1, 250.82401817373, localDate0, localDate0);
      fornecedorTipo1_0.addFatura(748, fatura0);
      fornecedorTipo1_0.getFaturas();
      assertEquals(5571.60877214, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(2880.398796134742, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(2880.398796134742, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", (-1883.635441827), (-830.0), 1.0);
      fornecedorTipo1_0.getFaturas();
      assertEquals((-830.0), fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals((-1883.635441827), fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(1.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", (-1.0), 0.0, (-1.0));
      double double0 = fornecedorTipo1_0.getPrecoBase();
      assertEquals((-1.0), fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      double double0 = fornecedorTipo1_0.getMultiplicador();
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.getNome();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("", (-1883.635441827), (-830.0), 1.0);
      double double0 = fornecedorTipo1_0.getImposto();
      assertEquals((-1883.635441827), fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(1.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals((-830.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1();
      boolean boolean0 = fornecedorTipo1_1.equals(fornecedorTipo1_0);
      assertEquals(0.0, fornecedorTipo1_1.getPrecoBase(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, fornecedorTipo1_1.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1();
      fornecedorTipo1_1.setMultiplicador((-995L));
      boolean boolean0 = fornecedorTipo1_0.equals(fornecedorTipo1_1);
      assertEquals((-995.0), fornecedorTipo1_1.getMultiplicador(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1();
      fornecedorTipo1_0.setImposto((-995L));
      boolean boolean0 = fornecedorTipo1_1.equals(fornecedorTipo1_0);
      assertEquals((-995.0), fornecedorTipo1_0.getImposto(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo1 fornecedorTipo1_1 = new FornecedorTipo1(",uh0TrUS", 810.9529F, 810.9529F, 810.9529F);
      boolean boolean0 = fornecedorTipo1_0.equals(fornecedorTipo1_1);
      assertEquals(810.952880859375, fornecedorTipo1_1.getMultiplicador(), 0.01);
      assertEquals(810.952880859375, fornecedorTipo1_1.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
      assertEquals(810.952880859375, fornecedorTipo1_1.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.example.Fatura.Fatura", 0.1, 0.1, 0.1);
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2(fornecedorTipo1_0);
      FornecedorTipo2 fornecedorTipo2_1 = new FornecedorTipo2("", 0.1, 0.1, 0.1);
      boolean boolean0 = fornecedorTipo2_0.equals(fornecedorTipo2_1);
      assertEquals(0.1, fornecedorTipo2_0.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_1.getMultiplicador(), 0.01);
      assertEquals(0.1, fornecedorTipo2_1.getPrecoBase(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.1, fornecedorTipo2_0.getImposto(), 0.01);
      assertEquals(0.1, fornecedorTipo2_1.getImposto(), 0.01);
      assertEquals(0.1, fornecedorTipo2_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      boolean boolean0 = fornecedorTipo1_0.equals((Object) null);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      boolean boolean0 = fornecedorTipo1_0.equals(fornecedorTipo1_0);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("org.example.Fatura.Fatura", 0.1, 0.1, 0.1);
      Object object0 = new Object();
      boolean boolean0 = fornecedorTipo1_0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.1, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.1, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.1, fornecedorTipo1_0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      Fatura fatura0 = new Fatura();
      fornecedorTipo1_0.addFatura((-3363), fatura0);
      boolean boolean0 = fornecedorTipo1_0.TemFaturas();
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      boolean boolean0 = fornecedorTipo1_0.TemFaturas();
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      Fatura fatura0 = new Fatura();
      fornecedorTipo1_0.addFatura((-3363), fatura0);
      Fornecedor fornecedor0 = fornecedorTipo1_0.clone();
      assertTrue(fornecedor0.equals((Object)fornecedorTipo1_0));
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertEquals(0.0, fornecedor0.getPrecoBase(), 0.01);
      assertEquals(0.0, fornecedor0.getMultiplicador(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      Fatura fatura0 = new Fatura();
      fornecedorTipo1_0.addFatura((-3363), fatura0);
      HashMap<Integer, List<Fatura>> hashMap0 = new HashMap<Integer, List<Fatura>>();
      fornecedorTipo1_0.setFaturas(hashMap0);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      fornecedorTipo1_0.hashCode();
      assertEquals(0.0, fornecedorTipo1_0.getImposto(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getMultiplicador(), 0.01);
      assertEquals(0.0, fornecedorTipo1_0.getPrecoBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      // Undeclared exception!
      try { 
        fornecedorTipo1_0.getFaturasDoNIF((-26));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, List<Fatura>> hashMap0 = new HashMap<Integer, List<Fatura>>();
      FornecedorTipo1 fornecedorTipo1_0 = null;
      try {
        fornecedorTipo1_0 = new FornecedorTipo1("7%|", 19.38, 19.38, 19.38, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }
}
