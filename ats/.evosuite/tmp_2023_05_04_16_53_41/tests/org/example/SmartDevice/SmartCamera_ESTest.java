/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 15:55:47 GMT 2023
 */

package org.example.SmartDevice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.SmartDevice.SmartCamera;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartCamera_ESTest extends SmartCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setSize((-1133));
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera0.setSize(0);
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertEquals(0, smartCamera0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      boolean boolean0 = smartCamera0.equals(smartCamera0);
      assertTrue(boolean0);
      assertEquals(0, smartCamera0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("", "Kb0uTFY;!;skRh", (-908));
      int int0 = smartCamera0.getSize();
      assertEquals((-908), int0);
      assertEquals("Kb0uTFY;!;skRh", smartCamera0.getResolution());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("yA#c~4?oBlK*X4X", "yA#c~4?oBlK*X4X", 0);
      smartCamera0.getResolution();
      assertEquals(0, smartCamera0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.getResolution();
      assertEquals(0, smartCamera0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, (-1419));
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals((-1419), smartCamera1.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, 125);
      // Undeclared exception!
      try { 
        smartCamera0.getConsume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.SmartDevice.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("7", "7", 4648);
      // Undeclared exception!
      try { 
        smartCamera0.getConsume();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.example.SmartDevice.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartCamera smartCamera0 = null;
      try {
        smartCamera0 = new SmartCamera((SmartCamera) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.SmartDevice.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("", "", 39);
      int int0 = smartCamera0.getSize();
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, (-1419));
      smartCamera0.getResolution();
      assertEquals((-1419), smartCamera0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setSize(35);
      SmartCamera smartCamera1 = new SmartCamera();
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertEquals(35, smartCamera0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      assertTrue(smartCamera1.equals((Object)smartCamera0));
      
      smartCamera1.setResolution(",6Ef`xqfm+!");
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertTrue(smartCamera1.equals((Object)smartCamera0));
      
      smartCamera1.turnOn();
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertFalse(smartCamera1.equals((Object)smartCamera0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      boolean boolean0 = smartCamera0.equals("SmartCamera{id='', on='false', resolution='', size='0'}");
      assertEquals(0, smartCamera0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, (-1419));
      boolean boolean0 = smartCamera0.equals((Object) null);
      assertEquals((-1419), smartCamera0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, (-1419));
      String string0 = smartCamera0.toString();
      assertEquals("SmartCamera{id='null', on='false', resolution='null', size='-1419'}", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, (-1419));
      int int0 = smartCamera0.getConsumption();
      assertEquals((-1419), smartCamera0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, (String) null, 125);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(125, smartCamera1.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("6fx\"yoGlfLaVx4;1T", "6fx\"yoGlfLaVx4;1T", 55);
      // Undeclared exception!
      try { 
        smartCamera0.getConsume();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera();
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertEquals(0, smartCamera1.getSize());
      assertTrue(boolean0);
  }
}
