/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 15:56:20 GMT 2023
 */

package org.example.Fatura;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.example.Fatura.Fatura;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setValorFaturacao(1703.58396912949);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1703.58396912949, fatura1.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF((-871));
      Fatura fatura1 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-871), fatura0.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura0);
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, fatura0.getNIF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1624), 1.0, localDate0, localDate0);
      double double0 = fatura0.getValorFaturacao();
      assertEquals((-1624), fatura0.getNIF());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-1624), (-1624), localDate0, localDate0);
      double double0 = fatura0.getValorFaturacao();
      assertEquals((-1624), fatura0.getNIF());
      assertEquals((-1624.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF(1040);
      int int0 = fatura0.getNIF();
      assertEquals(1040, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Fatura fatura0 = new Fatura((-734), (-3233.0), localDate0, localDate0);
      int int0 = fatura0.getNIF();
      assertEquals((-734), int0);
      assertEquals((-3233.0), fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      
      fatura0.setValorFaturacao(1.0);
      fatura0.clone();
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setValorFaturacao((-55.7));
      fatura0.clone();
      assertEquals((-55.7), fatura0.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF(2121);
      fatura0.clone();
      assertEquals(2121, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF((-871));
      fatura0.clone();
      assertEquals((-871), fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setData_inicio((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setData_fim((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura((-3288), 3145.346, localDate0, localDate0);
      // Undeclared exception!
      try { 
        fatura0.compareTo((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fatura.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fatura.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura(10, (-1.0), (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getData_inicio();
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      int int0 = fatura0.getNIF();
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getValorFaturacao();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      assertTrue(fatura1.equals((Object)fatura0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      fatura1.setData_fim(localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(fatura1.equals((Object)fatura0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      assertTrue(fatura1.equals((Object)fatura0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      fatura1.setData_inicio(localDate0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(fatura1.equals((Object)fatura0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setValorFaturacao(169);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(169.0, fatura0.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      boolean boolean0 = fatura0.equals(localDate0);
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(302, 302);
      Fatura fatura0 = new Fatura(302, 302, localDate0, localDate0);
      boolean boolean0 = fatura0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(302.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(302, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setNIF(169);
      Fatura fatura2 = fatura1.clone();
      boolean boolean0 = fatura0.equals(fatura2);
      assertEquals(169, fatura0.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setValorFaturacao(169);
      int int0 = fatura1.compareTo(fatura0);
      assertEquals(169.0, fatura1.getValorFaturacao(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      int int0 = fatura0.compareTo(fatura0);
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = fatura0.clone();
      fatura1.setValorFaturacao(169);
      int int0 = fatura0.compareTo(fatura1);
      assertEquals(169.0, fatura1.getValorFaturacao(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura1);
      assertTrue(boolean0);
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura1.getValorFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      String string0 = fatura0.toString();
      assertEquals("Fatura{NIF=0, valorFatura\u00E7\u00E3o=0.0, data_inicio=2014-02-14, data_fim=2014-02-14}\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getData_fim();
      assertEquals(0.0, fatura0.getValorFaturacao(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }
}
