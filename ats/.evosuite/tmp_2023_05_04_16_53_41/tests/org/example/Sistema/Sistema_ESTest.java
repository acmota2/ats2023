/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 15:57:00 GMT 2023
 */

package org.example.Sistema;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.example.CasaInteligente.CasaInteligente;
import org.example.Fatura.Fatura;
import org.example.Fornecedor.Fornecedor;
import org.example.Fornecedor.FornecedorTipo1;
import org.example.Fornecedor.FornecedorTipo2;
import org.example.Sistema.Sistema;
import org.example.SmartDevice.SmartSpeaker;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sistema_ESTest extends Sistema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        sistema0.casaQueMaisGastou(localDate0, localDate1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      sistema0.simulacao(localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(0);
      TreeSet<CasaInteligente> treeSet0 = sistema0.maioresConsumidoresEnergia(localDate0, localDate1);
      assertTrue(treeSet0.contains(casaInteligente0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      sistema0.adicionaCasa(casaInteligente0);
      sistema0.adicionaDivisao(1073741824, "^");
      assertEquals(1, sistema0.getNrCasasInteligentes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1((String) null, 0.0, 787.243951761235, 787.243951761235);
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      int int0 = sistema0.getNrFornecedores();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Integer integer0 = new Integer(0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      hashMap0.put(integer0, casaInteligente0);
      Sistema sistema1 = new Sistema(hashMap0, hashMap1);
      int int0 = sistema1.getNrCasasInteligentes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      HashMap<String, Fornecedor> hashMap1 = sistema0.getListaFornecedores();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1((String) null, (-901.28), (-1989.5223017133094), 1000000.0);
      hashMap1.put("^rY8a19\"/o", fornecedorTipo1_0);
      Sistema sistema1 = new Sistema(hashMap0, hashMap1);
      Sistema sistema2 = new Sistema(sistema1);
      String string0 = sistema2.fornecedorQueMaisFaturou();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("O NIF definido j\u00E1 esta atribu\u00EDdo a uma Casa Inteligente!", 0.0F, 0.01, 0.0F);
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      String string0 = sistema0.fornecedorQueMaisFaturou();
      assertEquals("O NIF definido j\u00E1 esta atribu\u00EDdo a uma Casa Inteligente!", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1("O NIF definido j\u00E1 esta atribu\u00EDdo a uma Casa Inteligente!", 0.0F, 0.01, 0.0F);
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(1, 0.01, localDate0, localDate0);
      fornecedorTipo1_0.addFatura((-442), fatura0);
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      List<Fatura> list0 = sistema0.faturasDoFornecedor("O NIF definido j\u00E1 esta atribu\u00EDdo a uma Casa Inteligente!");
      assertTrue(list0.contains(fatura0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      boolean boolean0 = sistema0.existeFornecedor("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Integer integer0 = new Integer(0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      hashMap0.put(integer0, casaInteligente0);
      Sistema sistema1 = new Sistema(hashMap0, hashMap1);
      boolean boolean0 = sistema1.existeCasa(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      sistema0.adicionaCasa(casaInteligente0);
      Sistema sistema1 = sistema0.clone();
      assertEquals(1, sistema1.getNrCasasInteligentes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.now();
      sistema0.simulacao(localDate0);
      CasaInteligente casaInteligente1 = sistema0.casaQueMaisGastou(localDate0, localDate0);
      assertEquals("", casaInteligente1.getNomeFornecedor());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      sistema0.simulacao(localDate0);
      CasaInteligente casaInteligente1 = sistema0.casaQueMaisGastou(localDate0, localDate0);
      assertTrue(casaInteligente1.equals((Object)casaInteligente0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      casaInteligente0.setNIF((-177));
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      sistema0.simulacao(localDate0);
      CasaInteligente casaInteligente1 = sistema0.casaQueMaisGastou(localDate0, localDate0);
      assertEquals("", casaInteligente1.getNome_proprietario());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente("", 1073741824, "");
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      sistema0.simulacao(localDate0);
      boolean boolean0 = sistema0.TemFaturas();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Sistema sistema0 = new Sistema(hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        sistema0.simulacao((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.setTime((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.setListaFornecedores((HashMap<String, Fornecedor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      hashMap0.put((Integer) null, (CasaInteligente) null);
      // Undeclared exception!
      try { 
        sistema0.setListaCasas(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Integer integer0 = new Integer(0);
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2(fornecedorTipo1_0);
      hashMap1.put(":D%@FbU$f[", fornecedorTipo2_0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      hashMap0.put(integer0, casaInteligente0);
      Sistema sistema1 = new Sistema(hashMap0, hashMap1);
      Sistema sistema2 = new Sistema(sistema1);
      LocalDate localDate0 = sistema1.getTime();
      // Undeclared exception!
      try { 
        sistema2.maioresConsumidoresEnergia(localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      try { 
        sistema0.guardaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = sistema0.getTime();
      // Undeclared exception!
      try { 
        sistema0.casaQueMaisGastou(localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Fornecedor.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.example.Sistema.Sistema");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "A Fornecedor indicada n\u00E3o existe!");
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      HashMap<Integer, CasaInteligente> hashMap1 = new HashMap<Integer, CasaInteligente>();
      Sistema sistema0 = new Sistema(hashMap1, hashMap0);
      try { 
        sistema0.carregaEstado("org.example.Sistema.Sistema");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 4120466F
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.example.Sistema.Sistema");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "A Fornecedor indicada n\u00E3o existe!");
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      HashMap<Integer, CasaInteligente> hashMap1 = new HashMap<Integer, CasaInteligente>();
      Sistema sistema0 = new Sistema(hashMap1, hashMap0);
      try { 
        sistema0.carregaEstado("org.example.Sistema.Sistema");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{u7RkF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      try { 
        sistema0.carregaEstado("{u7RkF");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.adicionaFornecedor((Fornecedor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.adicionaCasa((CasaInteligente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{u7RkF", 723, "", ", data_inicio=");
      // Undeclared exception!
      try { 
        sistema0.addDevice(723, "", smartSpeaker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sistema sistema0 = null;
      try {
        sistema0 = new Sistema((Sistema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      Sistema sistema0 = null;
      try {
        sistema0 = new Sistema((HashMap<Integer, CasaInteligente>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2();
      sistema0.adicionaFornecedor(fornecedorTipo2_0);
      HashMap<String, Fornecedor> hashMap0 = sistema0.getListaFornecedores();
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<String, Fornecedor> hashMap0 = sistema0.getListaFornecedores();
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2("", 0.0, 6098.61857082, (-6239.0));
      hashMap0.put((String) null, fornecedorTipo2_0);
      sistema0.setListaFornecedores(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = sistema0.getListaCasas();
      Integer integer0 = new Integer((-3058));
      CasaInteligente casaInteligente0 = new CasaInteligente();
      hashMap0.put(integer0, casaInteligente0);
      sistema0.setListaCasas(hashMap0);
      HashMap<Integer, CasaInteligente> hashMap1 = sistema0.getListaCasas();
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      Sistema sistema1 = new Sistema(sistema0);
      boolean boolean0 = sistema0.equals(sistema1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      FornecedorTipo2 fornecedorTipo2_0 = new FornecedorTipo2(fornecedorTipo1_0);
      boolean boolean0 = sistema0.equals(fornecedorTipo2_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      boolean boolean0 = sistema0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      boolean boolean0 = sistema0.equals(sistema0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, FornecedorTipo1> hashMap1 = new HashMap<String, FornecedorTipo1>();
      HashMap<String, Fornecedor> hashMap2 = new HashMap<String, Fornecedor>(hashMap1);
      Sistema sistema0 = new Sistema(hashMap0, hashMap2);
      try { 
        sistema0.faturasDoFornecedor("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fornecedor n\u00E3o existente
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      List<Fatura> list0 = sistema0.faturasDoFornecedor("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      String string0 = sistema0.fornecedorQueMaisFaturou();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      sistema0.adicionaCasa(casaInteligente0);
      LocalDate localDate0 = MockLocalDate.now();
      sistema0.simulacao(localDate0);
      String string0 = sistema0.fornecedorQueMaisFaturou();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      try { 
        sistema0.adicionaFornecedor(fornecedorTipo1_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O nome definido j\u00E1 esta atribu\u00EDdo a uma Fornecedor!
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      CasaInteligente casaInteligente0 = new CasaInteligente("8@yzUj!5<z0\"=z_}va", (-3179), "8@yzUj!5<z0\"=z_}va");
      try { 
        sistema0.adicionaCasa(casaInteligente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A Fornecedor indicada n\u00E3o existe!
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      sistema0.adicionaCasa(casaInteligente0);
      try { 
        sistema0.adicionaCasa(casaInteligente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O NIF definido j\u00E1 esta atribu\u00EDdo a uma Casa Inteligente!
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      Sistema sistema1 = new Sistema(sistema0);
      assertTrue(sistema1.equals((Object)sistema0));
      
      FornecedorTipo1 fornecedorTipo1_0 = new FornecedorTipo1();
      sistema0.adicionaFornecedor(fornecedorTipo1_0);
      boolean boolean0 = sistema1.equals(sistema0);
      assertFalse(sistema1.equals((Object)sistema0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Integer integer0 = new Integer(19);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      hashMap0.put(integer0, casaInteligente0);
      Sistema sistema1 = new Sistema(hashMap0, hashMap1);
      boolean boolean0 = sistema1.equals(sistema0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      boolean boolean0 = sistema0.TemFaturas();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      boolean boolean0 = sistema0.existeFornecedor(", data_fim=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      int int0 = sistema0.getNrCasasInteligentes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      int int0 = sistema0.getNrFornecedores();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      Sistema sistema0 = new Sistema(hashMap0, hashMap1);
      try { 
        sistema0.guardaEstado("Q*8RF8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      boolean boolean0 = sistema0.existeCasa(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      // Undeclared exception!
      try { 
        sistema0.adicionaDivisao(0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Sistema.Sistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      String string0 = sistema0.toString();
      assertEquals("Sistema {\nlistaCasas= \n{}\nlistaFornecedores= \n{}\n}", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      Sistema sistema1 = sistema0.clone();
      assertEquals(0, sistema1.getNrCasasInteligentes());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Sistema sistema0 = new Sistema();
      LocalDate localDate0 = sistema0.getTime();
      sistema0.setTime(localDate0);
      assertEquals(0, sistema0.getNrCasasInteligentes());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      HashMap<Integer, CasaInteligente> hashMap1 = new HashMap<Integer, CasaInteligente>();
      Sistema sistema0 = new Sistema(hashMap1, hashMap0);
      try { 
        sistema0.carregaEstado("org.example.Sistema.Sistema");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
